// Code generated by Kitex v0.14.1. DO NOT EDIT.

package psychmodelservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	basic "github.com/xh-polaris/psych-idl/kitex_gen/basic"
	model "github.com/xh-polaris/psych-idl/kitex_gen/model"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	UnitAppConfigCreate(ctx context.Context, Req *model.UnitAppConfigCreateReq, callOptions ...callopt.Option) (r *model.UnitAppConfigCreateResp, err error)
	UnitAppConfigUpdate(ctx context.Context, Req *model.UnitAppConfigUpdateReq, callOptions ...callopt.Option) (r *basic.Response, err error)
	UnitAppConfigGet(ctx context.Context, Req *model.UnitAppConfigGetReq, callOptions ...callopt.Option) (r *model.UnitAppConfigGetResp, err error)
	AppCreate(ctx context.Context, Req *model.AppCreateReq, callOptions ...callopt.Option) (r *model.AppCreateResp, err error)
	AppUpdate(ctx context.Context, Req *model.AppUpdateReq, callOptions ...callopt.Option) (r *basic.Response, err error)
	AppGet(ctx context.Context, Req *model.AppGetReq, callOptions ...callopt.Option) (r *model.AppGetResp, err error)
	AppDelete(ctx context.Context, Req *model.AppDeleteReq, callOptions ...callopt.Option) (r *basic.Response, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kPsychModelServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPsychModelServiceClient struct {
	*kClient
}

func (p *kPsychModelServiceClient) UnitAppConfigCreate(ctx context.Context, Req *model.UnitAppConfigCreateReq, callOptions ...callopt.Option) (r *model.UnitAppConfigCreateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitAppConfigCreate(ctx, Req)
}

func (p *kPsychModelServiceClient) UnitAppConfigUpdate(ctx context.Context, Req *model.UnitAppConfigUpdateReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitAppConfigUpdate(ctx, Req)
}

func (p *kPsychModelServiceClient) UnitAppConfigGet(ctx context.Context, Req *model.UnitAppConfigGetReq, callOptions ...callopt.Option) (r *model.UnitAppConfigGetResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitAppConfigGet(ctx, Req)
}

func (p *kPsychModelServiceClient) AppCreate(ctx context.Context, Req *model.AppCreateReq, callOptions ...callopt.Option) (r *model.AppCreateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AppCreate(ctx, Req)
}

func (p *kPsychModelServiceClient) AppUpdate(ctx context.Context, Req *model.AppUpdateReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AppUpdate(ctx, Req)
}

func (p *kPsychModelServiceClient) AppGet(ctx context.Context, Req *model.AppGetReq, callOptions ...callopt.Option) (r *model.AppGetResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AppGet(ctx, Req)
}

func (p *kPsychModelServiceClient) AppDelete(ctx context.Context, Req *model.AppDeleteReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AppDelete(ctx, Req)
}

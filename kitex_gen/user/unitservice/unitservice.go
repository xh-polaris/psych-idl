// Code generated by Kitex v0.13.1. DO NOT EDIT.

package unitservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "github.com/cloudwego/prutal"
	basic "github.com/xh-polaris/psych-idl-gen/kitex_gen/basic"
	user "github.com/xh-polaris/psych-idl-gen/kitex_gen/user"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"UnitSignUp": kitex.NewMethodInfo(
		unitSignUpHandler,
		newUnitSignUpArgs,
		newUnitSignUpResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitGetInfo": kitex.NewMethodInfo(
		unitGetInfoHandler,
		newUnitGetInfoArgs,
		newUnitGetInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitUpdateInfo": kitex.NewMethodInfo(
		unitUpdateInfoHandler,
		newUnitUpdateInfoArgs,
		newUnitUpdateInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitUpdatePassword": kitex.NewMethodInfo(
		unitUpdatePasswordHandler,
		newUnitUpdatePasswordArgs,
		newUnitUpdatePasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitCreateAndLinkUser": kitex.NewMethodInfo(
		unitCreateAndLinkUserHandler,
		newUnitCreateAndLinkUserArgs,
		newUnitCreateAndLinkUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitCreateAndLinkView": kitex.NewMethodInfo(
		unitCreateAndLinkViewHandler,
		newUnitCreateAndLinkViewArgs,
		newUnitCreateAndLinkViewResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitStrongVerify": kitex.NewMethodInfo(
		unitStrongVerifyHandler,
		newUnitStrongVerifyArgs,
		newUnitStrongVerifyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitWeakVerify": kitex.NewMethodInfo(
		unitWeakVerifyHandler,
		newUnitWeakVerifyArgs,
		newUnitWeakVerifyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitCreateVerify": kitex.NewMethodInfo(
		unitCreateVerifyHandler,
		newUnitCreateVerifyArgs,
		newUnitCreateVerifyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitUpdateVerifyPassword": kitex.NewMethodInfo(
		unitUpdateVerifyPasswordHandler,
		newUnitUpdateVerifyPasswordArgs,
		newUnitUpdateVerifyPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitLinkUser": kitex.NewMethodInfo(
		unitLinkUserHandler,
		newUnitLinkUserArgs,
		newUnitLinkUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitLinkView": kitex.NewMethodInfo(
		unitLinkViewHandler,
		newUnitLinkViewArgs,
		newUnitLinkViewResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitPageQueryUser": kitex.NewMethodInfo(
		unitPageQueryUserHandler,
		newUnitPageQueryUserArgs,
		newUnitPageQueryUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitPageQueryView": kitex.NewMethodInfo(
		unitPageQueryViewHandler,
		newUnitPageQueryViewArgs,
		newUnitPageQueryViewResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitGetAppInfo": kitex.NewMethodInfo(
		unitGetAppInfoHandler,
		newUnitGetAppInfoArgs,
		newUnitGetAppInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitModelGetInfo": kitex.NewMethodInfo(
		unitModelGetInfoHandler,
		newUnitModelGetInfoArgs,
		newUnitModelGetInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UnitModelUpdateInfo": kitex.NewMethodInfo(
		unitModelUpdateInfoHandler,
		newUnitModelUpdateInfoArgs,
		newUnitModelUpdateInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	unitServiceServiceInfo                = NewServiceInfo()
	unitServiceServiceInfoForClient       = NewServiceInfoForClient()
	unitServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return unitServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return unitServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return unitServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UnitService"
	handlerType := (*user.UnitService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func unitSignUpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitSignUpReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitSignUp(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitSignUpArgs:
		success, err := handler.(user.UnitService).UnitSignUp(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitSignUpResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitSignUpArgs() interface{} {
	return &UnitSignUpArgs{}
}

func newUnitSignUpResult() interface{} {
	return &UnitSignUpResult{}
}

type UnitSignUpArgs struct {
	Req *user.UnitSignUpReq
}

func (p *UnitSignUpArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitSignUpArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitSignUpReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitSignUpArgs_Req_DEFAULT *user.UnitSignUpReq

func (p *UnitSignUpArgs) GetReq() *user.UnitSignUpReq {
	if !p.IsSetReq() {
		return UnitSignUpArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitSignUpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitSignUpArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitSignUpResult struct {
	Success *basic.Response
}

var UnitSignUpResult_Success_DEFAULT *basic.Response

func (p *UnitSignUpResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitSignUpResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitSignUpResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UnitSignUpResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitSignUpResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UnitSignUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitSignUpResult) GetResult() interface{} {
	return p.Success
}

func unitGetInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitGetInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitGetInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitGetInfoArgs:
		success, err := handler.(user.UnitService).UnitGetInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitGetInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitGetInfoArgs() interface{} {
	return &UnitGetInfoArgs{}
}

func newUnitGetInfoResult() interface{} {
	return &UnitGetInfoResult{}
}

type UnitGetInfoArgs struct {
	Req *user.UnitGetInfoReq
}

func (p *UnitGetInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitGetInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitGetInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitGetInfoArgs_Req_DEFAULT *user.UnitGetInfoReq

func (p *UnitGetInfoArgs) GetReq() *user.UnitGetInfoReq {
	if !p.IsSetReq() {
		return UnitGetInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitGetInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitGetInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitGetInfoResult struct {
	Success *user.UnitGetInfoResp
}

var UnitGetInfoResult_Success_DEFAULT *user.UnitGetInfoResp

func (p *UnitGetInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitGetInfoResult) Unmarshal(in []byte) error {
	msg := new(user.UnitGetInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitGetInfoResult) GetSuccess() *user.UnitGetInfoResp {
	if !p.IsSetSuccess() {
		return UnitGetInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitGetInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UnitGetInfoResp)
}

func (p *UnitGetInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitGetInfoResult) GetResult() interface{} {
	return p.Success
}

func unitUpdateInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitUpdateInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitUpdateInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitUpdateInfoArgs:
		success, err := handler.(user.UnitService).UnitUpdateInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitUpdateInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitUpdateInfoArgs() interface{} {
	return &UnitUpdateInfoArgs{}
}

func newUnitUpdateInfoResult() interface{} {
	return &UnitUpdateInfoResult{}
}

type UnitUpdateInfoArgs struct {
	Req *user.UnitUpdateInfoReq
}

func (p *UnitUpdateInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitUpdateInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitUpdateInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitUpdateInfoArgs_Req_DEFAULT *user.UnitUpdateInfoReq

func (p *UnitUpdateInfoArgs) GetReq() *user.UnitUpdateInfoReq {
	if !p.IsSetReq() {
		return UnitUpdateInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitUpdateInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitUpdateInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitUpdateInfoResult struct {
	Success *basic.Response
}

var UnitUpdateInfoResult_Success_DEFAULT *basic.Response

func (p *UnitUpdateInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitUpdateInfoResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitUpdateInfoResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UnitUpdateInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitUpdateInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UnitUpdateInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitUpdateInfoResult) GetResult() interface{} {
	return p.Success
}

func unitUpdatePasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitUpdatePasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitUpdatePassword(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitUpdatePasswordArgs:
		success, err := handler.(user.UnitService).UnitUpdatePassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitUpdatePasswordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitUpdatePasswordArgs() interface{} {
	return &UnitUpdatePasswordArgs{}
}

func newUnitUpdatePasswordResult() interface{} {
	return &UnitUpdatePasswordResult{}
}

type UnitUpdatePasswordArgs struct {
	Req *user.UnitUpdatePasswordReq
}

func (p *UnitUpdatePasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitUpdatePasswordArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitUpdatePasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitUpdatePasswordArgs_Req_DEFAULT *user.UnitUpdatePasswordReq

func (p *UnitUpdatePasswordArgs) GetReq() *user.UnitUpdatePasswordReq {
	if !p.IsSetReq() {
		return UnitUpdatePasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitUpdatePasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitUpdatePasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitUpdatePasswordResult struct {
	Success *basic.Response
}

var UnitUpdatePasswordResult_Success_DEFAULT *basic.Response

func (p *UnitUpdatePasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitUpdatePasswordResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitUpdatePasswordResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UnitUpdatePasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitUpdatePasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UnitUpdatePasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitUpdatePasswordResult) GetResult() interface{} {
	return p.Success
}

func unitCreateAndLinkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitCreateAndLinkUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitCreateAndLinkUser(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitCreateAndLinkUserArgs:
		success, err := handler.(user.UnitService).UnitCreateAndLinkUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitCreateAndLinkUserResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitCreateAndLinkUserArgs() interface{} {
	return &UnitCreateAndLinkUserArgs{}
}

func newUnitCreateAndLinkUserResult() interface{} {
	return &UnitCreateAndLinkUserResult{}
}

type UnitCreateAndLinkUserArgs struct {
	Req *user.UnitCreateAndLinkUserReq
}

func (p *UnitCreateAndLinkUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitCreateAndLinkUserArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitCreateAndLinkUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitCreateAndLinkUserArgs_Req_DEFAULT *user.UnitCreateAndLinkUserReq

func (p *UnitCreateAndLinkUserArgs) GetReq() *user.UnitCreateAndLinkUserReq {
	if !p.IsSetReq() {
		return UnitCreateAndLinkUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitCreateAndLinkUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitCreateAndLinkUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitCreateAndLinkUserResult struct {
	Success *basic.Response
}

var UnitCreateAndLinkUserResult_Success_DEFAULT *basic.Response

func (p *UnitCreateAndLinkUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitCreateAndLinkUserResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitCreateAndLinkUserResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UnitCreateAndLinkUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitCreateAndLinkUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UnitCreateAndLinkUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitCreateAndLinkUserResult) GetResult() interface{} {
	return p.Success
}

func unitCreateAndLinkViewHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitCreateAndLinkViewReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitCreateAndLinkView(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitCreateAndLinkViewArgs:
		success, err := handler.(user.UnitService).UnitCreateAndLinkView(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitCreateAndLinkViewResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitCreateAndLinkViewArgs() interface{} {
	return &UnitCreateAndLinkViewArgs{}
}

func newUnitCreateAndLinkViewResult() interface{} {
	return &UnitCreateAndLinkViewResult{}
}

type UnitCreateAndLinkViewArgs struct {
	Req *user.UnitCreateAndLinkViewReq
}

func (p *UnitCreateAndLinkViewArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitCreateAndLinkViewArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitCreateAndLinkViewReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitCreateAndLinkViewArgs_Req_DEFAULT *user.UnitCreateAndLinkViewReq

func (p *UnitCreateAndLinkViewArgs) GetReq() *user.UnitCreateAndLinkViewReq {
	if !p.IsSetReq() {
		return UnitCreateAndLinkViewArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitCreateAndLinkViewArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitCreateAndLinkViewArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitCreateAndLinkViewResult struct {
	Success *basic.Response
}

var UnitCreateAndLinkViewResult_Success_DEFAULT *basic.Response

func (p *UnitCreateAndLinkViewResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitCreateAndLinkViewResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitCreateAndLinkViewResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UnitCreateAndLinkViewResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitCreateAndLinkViewResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UnitCreateAndLinkViewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitCreateAndLinkViewResult) GetResult() interface{} {
	return p.Success
}

func unitStrongVerifyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitStrongVerifyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitStrongVerify(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitStrongVerifyArgs:
		success, err := handler.(user.UnitService).UnitStrongVerify(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitStrongVerifyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitStrongVerifyArgs() interface{} {
	return &UnitStrongVerifyArgs{}
}

func newUnitStrongVerifyResult() interface{} {
	return &UnitStrongVerifyResult{}
}

type UnitStrongVerifyArgs struct {
	Req *user.UnitStrongVerifyReq
}

func (p *UnitStrongVerifyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitStrongVerifyArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitStrongVerifyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitStrongVerifyArgs_Req_DEFAULT *user.UnitStrongVerifyReq

func (p *UnitStrongVerifyArgs) GetReq() *user.UnitStrongVerifyReq {
	if !p.IsSetReq() {
		return UnitStrongVerifyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitStrongVerifyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitStrongVerifyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitStrongVerifyResult struct {
	Success *basic.Response
}

var UnitStrongVerifyResult_Success_DEFAULT *basic.Response

func (p *UnitStrongVerifyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitStrongVerifyResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitStrongVerifyResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UnitStrongVerifyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitStrongVerifyResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UnitStrongVerifyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitStrongVerifyResult) GetResult() interface{} {
	return p.Success
}

func unitWeakVerifyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitWeakVerifyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitWeakVerify(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitWeakVerifyArgs:
		success, err := handler.(user.UnitService).UnitWeakVerify(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitWeakVerifyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitWeakVerifyArgs() interface{} {
	return &UnitWeakVerifyArgs{}
}

func newUnitWeakVerifyResult() interface{} {
	return &UnitWeakVerifyResult{}
}

type UnitWeakVerifyArgs struct {
	Req *user.UnitWeakVerifyReq
}

func (p *UnitWeakVerifyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitWeakVerifyArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitWeakVerifyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitWeakVerifyArgs_Req_DEFAULT *user.UnitWeakVerifyReq

func (p *UnitWeakVerifyArgs) GetReq() *user.UnitWeakVerifyReq {
	if !p.IsSetReq() {
		return UnitWeakVerifyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitWeakVerifyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitWeakVerifyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitWeakVerifyResult struct {
	Success *basic.Response
}

var UnitWeakVerifyResult_Success_DEFAULT *basic.Response

func (p *UnitWeakVerifyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitWeakVerifyResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitWeakVerifyResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UnitWeakVerifyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitWeakVerifyResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UnitWeakVerifyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitWeakVerifyResult) GetResult() interface{} {
	return p.Success
}

func unitCreateVerifyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitCreateVerifyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitCreateVerify(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitCreateVerifyArgs:
		success, err := handler.(user.UnitService).UnitCreateVerify(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitCreateVerifyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitCreateVerifyArgs() interface{} {
	return &UnitCreateVerifyArgs{}
}

func newUnitCreateVerifyResult() interface{} {
	return &UnitCreateVerifyResult{}
}

type UnitCreateVerifyArgs struct {
	Req *user.UnitCreateVerifyReq
}

func (p *UnitCreateVerifyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitCreateVerifyArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitCreateVerifyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitCreateVerifyArgs_Req_DEFAULT *user.UnitCreateVerifyReq

func (p *UnitCreateVerifyArgs) GetReq() *user.UnitCreateVerifyReq {
	if !p.IsSetReq() {
		return UnitCreateVerifyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitCreateVerifyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitCreateVerifyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitCreateVerifyResult struct {
	Success *user.UnitCreateVerifyResp
}

var UnitCreateVerifyResult_Success_DEFAULT *user.UnitCreateVerifyResp

func (p *UnitCreateVerifyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitCreateVerifyResult) Unmarshal(in []byte) error {
	msg := new(user.UnitCreateVerifyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitCreateVerifyResult) GetSuccess() *user.UnitCreateVerifyResp {
	if !p.IsSetSuccess() {
		return UnitCreateVerifyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitCreateVerifyResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UnitCreateVerifyResp)
}

func (p *UnitCreateVerifyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitCreateVerifyResult) GetResult() interface{} {
	return p.Success
}

func unitUpdateVerifyPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitUpdateVerifyPasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitUpdateVerifyPassword(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitUpdateVerifyPasswordArgs:
		success, err := handler.(user.UnitService).UnitUpdateVerifyPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitUpdateVerifyPasswordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitUpdateVerifyPasswordArgs() interface{} {
	return &UnitUpdateVerifyPasswordArgs{}
}

func newUnitUpdateVerifyPasswordResult() interface{} {
	return &UnitUpdateVerifyPasswordResult{}
}

type UnitUpdateVerifyPasswordArgs struct {
	Req *user.UnitUpdateVerifyPasswordReq
}

func (p *UnitUpdateVerifyPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitUpdateVerifyPasswordArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitUpdateVerifyPasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitUpdateVerifyPasswordArgs_Req_DEFAULT *user.UnitUpdateVerifyPasswordReq

func (p *UnitUpdateVerifyPasswordArgs) GetReq() *user.UnitUpdateVerifyPasswordReq {
	if !p.IsSetReq() {
		return UnitUpdateVerifyPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitUpdateVerifyPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitUpdateVerifyPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitUpdateVerifyPasswordResult struct {
	Success *basic.Response
}

var UnitUpdateVerifyPasswordResult_Success_DEFAULT *basic.Response

func (p *UnitUpdateVerifyPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitUpdateVerifyPasswordResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitUpdateVerifyPasswordResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UnitUpdateVerifyPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitUpdateVerifyPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UnitUpdateVerifyPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitUpdateVerifyPasswordResult) GetResult() interface{} {
	return p.Success
}

func unitLinkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitLinkUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitLinkUser(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitLinkUserArgs:
		success, err := handler.(user.UnitService).UnitLinkUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitLinkUserResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitLinkUserArgs() interface{} {
	return &UnitLinkUserArgs{}
}

func newUnitLinkUserResult() interface{} {
	return &UnitLinkUserResult{}
}

type UnitLinkUserArgs struct {
	Req *user.UnitLinkUserReq
}

func (p *UnitLinkUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitLinkUserArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitLinkUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitLinkUserArgs_Req_DEFAULT *user.UnitLinkUserReq

func (p *UnitLinkUserArgs) GetReq() *user.UnitLinkUserReq {
	if !p.IsSetReq() {
		return UnitLinkUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitLinkUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitLinkUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitLinkUserResult struct {
	Success *basic.Response
}

var UnitLinkUserResult_Success_DEFAULT *basic.Response

func (p *UnitLinkUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitLinkUserResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitLinkUserResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UnitLinkUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitLinkUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UnitLinkUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitLinkUserResult) GetResult() interface{} {
	return p.Success
}

func unitLinkViewHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitLinkViewReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitLinkView(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitLinkViewArgs:
		success, err := handler.(user.UnitService).UnitLinkView(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitLinkViewResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitLinkViewArgs() interface{} {
	return &UnitLinkViewArgs{}
}

func newUnitLinkViewResult() interface{} {
	return &UnitLinkViewResult{}
}

type UnitLinkViewArgs struct {
	Req *user.UnitLinkViewReq
}

func (p *UnitLinkViewArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitLinkViewArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitLinkViewReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitLinkViewArgs_Req_DEFAULT *user.UnitLinkViewReq

func (p *UnitLinkViewArgs) GetReq() *user.UnitLinkViewReq {
	if !p.IsSetReq() {
		return UnitLinkViewArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitLinkViewArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitLinkViewArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitLinkViewResult struct {
	Success *basic.Response
}

var UnitLinkViewResult_Success_DEFAULT *basic.Response

func (p *UnitLinkViewResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitLinkViewResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitLinkViewResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UnitLinkViewResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitLinkViewResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UnitLinkViewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitLinkViewResult) GetResult() interface{} {
	return p.Success
}

func unitPageQueryUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitPageQueryUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitPageQueryUser(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitPageQueryUserArgs:
		success, err := handler.(user.UnitService).UnitPageQueryUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitPageQueryUserResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitPageQueryUserArgs() interface{} {
	return &UnitPageQueryUserArgs{}
}

func newUnitPageQueryUserResult() interface{} {
	return &UnitPageQueryUserResult{}
}

type UnitPageQueryUserArgs struct {
	Req *user.UnitPageQueryUserReq
}

func (p *UnitPageQueryUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitPageQueryUserArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitPageQueryUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitPageQueryUserArgs_Req_DEFAULT *user.UnitPageQueryUserReq

func (p *UnitPageQueryUserArgs) GetReq() *user.UnitPageQueryUserReq {
	if !p.IsSetReq() {
		return UnitPageQueryUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitPageQueryUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitPageQueryUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitPageQueryUserResult struct {
	Success *user.UnitPageQueryUserResp
}

var UnitPageQueryUserResult_Success_DEFAULT *user.UnitPageQueryUserResp

func (p *UnitPageQueryUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitPageQueryUserResult) Unmarshal(in []byte) error {
	msg := new(user.UnitPageQueryUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitPageQueryUserResult) GetSuccess() *user.UnitPageQueryUserResp {
	if !p.IsSetSuccess() {
		return UnitPageQueryUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitPageQueryUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UnitPageQueryUserResp)
}

func (p *UnitPageQueryUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitPageQueryUserResult) GetResult() interface{} {
	return p.Success
}

func unitPageQueryViewHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitPageQueryViewReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitPageQueryView(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitPageQueryViewArgs:
		success, err := handler.(user.UnitService).UnitPageQueryView(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitPageQueryViewResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitPageQueryViewArgs() interface{} {
	return &UnitPageQueryViewArgs{}
}

func newUnitPageQueryViewResult() interface{} {
	return &UnitPageQueryViewResult{}
}

type UnitPageQueryViewArgs struct {
	Req *user.UnitPageQueryViewReq
}

func (p *UnitPageQueryViewArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitPageQueryViewArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitPageQueryViewReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitPageQueryViewArgs_Req_DEFAULT *user.UnitPageQueryViewReq

func (p *UnitPageQueryViewArgs) GetReq() *user.UnitPageQueryViewReq {
	if !p.IsSetReq() {
		return UnitPageQueryViewArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitPageQueryViewArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitPageQueryViewArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitPageQueryViewResult struct {
	Success *user.UnitPageQueryViewResp
}

var UnitPageQueryViewResult_Success_DEFAULT *user.UnitPageQueryViewResp

func (p *UnitPageQueryViewResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitPageQueryViewResult) Unmarshal(in []byte) error {
	msg := new(user.UnitPageQueryViewResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitPageQueryViewResult) GetSuccess() *user.UnitPageQueryViewResp {
	if !p.IsSetSuccess() {
		return UnitPageQueryViewResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitPageQueryViewResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UnitPageQueryViewResp)
}

func (p *UnitPageQueryViewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitPageQueryViewResult) GetResult() interface{} {
	return p.Success
}

func unitGetAppInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitGetAppInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitGetAppInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitGetAppInfoArgs:
		success, err := handler.(user.UnitService).UnitGetAppInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitGetAppInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitGetAppInfoArgs() interface{} {
	return &UnitGetAppInfoArgs{}
}

func newUnitGetAppInfoResult() interface{} {
	return &UnitGetAppInfoResult{}
}

type UnitGetAppInfoArgs struct {
	Req *user.UnitGetAppInfoReq
}

func (p *UnitGetAppInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitGetAppInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitGetAppInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitGetAppInfoArgs_Req_DEFAULT *user.UnitGetAppInfoReq

func (p *UnitGetAppInfoArgs) GetReq() *user.UnitGetAppInfoReq {
	if !p.IsSetReq() {
		return UnitGetAppInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitGetAppInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitGetAppInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitGetAppInfoResult struct {
	Success *user.UnitGetAppInfoResp
}

var UnitGetAppInfoResult_Success_DEFAULT *user.UnitGetAppInfoResp

func (p *UnitGetAppInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitGetAppInfoResult) Unmarshal(in []byte) error {
	msg := new(user.UnitGetAppInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitGetAppInfoResult) GetSuccess() *user.UnitGetAppInfoResp {
	if !p.IsSetSuccess() {
		return UnitGetAppInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitGetAppInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UnitGetAppInfoResp)
}

func (p *UnitGetAppInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitGetAppInfoResult) GetResult() interface{} {
	return p.Success
}

func unitModelGetInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitModelGetInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitModelGetInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitModelGetInfoArgs:
		success, err := handler.(user.UnitService).UnitModelGetInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitModelGetInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitModelGetInfoArgs() interface{} {
	return &UnitModelGetInfoArgs{}
}

func newUnitModelGetInfoResult() interface{} {
	return &UnitModelGetInfoResult{}
}

type UnitModelGetInfoArgs struct {
	Req *user.UnitModelGetInfoReq
}

func (p *UnitModelGetInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitModelGetInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitModelGetInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitModelGetInfoArgs_Req_DEFAULT *user.UnitModelGetInfoReq

func (p *UnitModelGetInfoArgs) GetReq() *user.UnitModelGetInfoReq {
	if !p.IsSetReq() {
		return UnitModelGetInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitModelGetInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitModelGetInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitModelGetInfoResult struct {
	Success *user.UnitModelGetInfoResp
}

var UnitModelGetInfoResult_Success_DEFAULT *user.UnitModelGetInfoResp

func (p *UnitModelGetInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitModelGetInfoResult) Unmarshal(in []byte) error {
	msg := new(user.UnitModelGetInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitModelGetInfoResult) GetSuccess() *user.UnitModelGetInfoResp {
	if !p.IsSetSuccess() {
		return UnitModelGetInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitModelGetInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UnitModelGetInfoResp)
}

func (p *UnitModelGetInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitModelGetInfoResult) GetResult() interface{} {
	return p.Success
}

func unitModelUpdateInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UnitModelUpdateInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UnitService).UnitModelUpdateInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UnitModelUpdateInfoArgs:
		success, err := handler.(user.UnitService).UnitModelUpdateInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnitModelUpdateInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUnitModelUpdateInfoArgs() interface{} {
	return &UnitModelUpdateInfoArgs{}
}

func newUnitModelUpdateInfoResult() interface{} {
	return &UnitModelUpdateInfoResult{}
}

type UnitModelUpdateInfoArgs struct {
	Req *user.UnitModelUpdateInfoReq
}

func (p *UnitModelUpdateInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnitModelUpdateInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.UnitModelUpdateInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnitModelUpdateInfoArgs_Req_DEFAULT *user.UnitModelUpdateInfoReq

func (p *UnitModelUpdateInfoArgs) GetReq() *user.UnitModelUpdateInfoReq {
	if !p.IsSetReq() {
		return UnitModelUpdateInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnitModelUpdateInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnitModelUpdateInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnitModelUpdateInfoResult struct {
	Success *basic.Response
}

var UnitModelUpdateInfoResult_Success_DEFAULT *basic.Response

func (p *UnitModelUpdateInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnitModelUpdateInfoResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnitModelUpdateInfoResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UnitModelUpdateInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnitModelUpdateInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UnitModelUpdateInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnitModelUpdateInfoResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UnitSignUp(ctx context.Context, Req *user.UnitSignUpReq) (r *basic.Response, err error) {
	var _args UnitSignUpArgs
	_args.Req = Req
	var _result UnitSignUpResult
	if err = p.c.Call(ctx, "UnitSignUp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitGetInfo(ctx context.Context, Req *user.UnitGetInfoReq) (r *user.UnitGetInfoResp, err error) {
	var _args UnitGetInfoArgs
	_args.Req = Req
	var _result UnitGetInfoResult
	if err = p.c.Call(ctx, "UnitGetInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitUpdateInfo(ctx context.Context, Req *user.UnitUpdateInfoReq) (r *basic.Response, err error) {
	var _args UnitUpdateInfoArgs
	_args.Req = Req
	var _result UnitUpdateInfoResult
	if err = p.c.Call(ctx, "UnitUpdateInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitUpdatePassword(ctx context.Context, Req *user.UnitUpdatePasswordReq) (r *basic.Response, err error) {
	var _args UnitUpdatePasswordArgs
	_args.Req = Req
	var _result UnitUpdatePasswordResult
	if err = p.c.Call(ctx, "UnitUpdatePassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitCreateAndLinkUser(ctx context.Context, Req *user.UnitCreateAndLinkUserReq) (r *basic.Response, err error) {
	var _args UnitCreateAndLinkUserArgs
	_args.Req = Req
	var _result UnitCreateAndLinkUserResult
	if err = p.c.Call(ctx, "UnitCreateAndLinkUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitCreateAndLinkView(ctx context.Context, Req *user.UnitCreateAndLinkViewReq) (r *basic.Response, err error) {
	var _args UnitCreateAndLinkViewArgs
	_args.Req = Req
	var _result UnitCreateAndLinkViewResult
	if err = p.c.Call(ctx, "UnitCreateAndLinkView", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitStrongVerify(ctx context.Context, Req *user.UnitStrongVerifyReq) (r *basic.Response, err error) {
	var _args UnitStrongVerifyArgs
	_args.Req = Req
	var _result UnitStrongVerifyResult
	if err = p.c.Call(ctx, "UnitStrongVerify", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitWeakVerify(ctx context.Context, Req *user.UnitWeakVerifyReq) (r *basic.Response, err error) {
	var _args UnitWeakVerifyArgs
	_args.Req = Req
	var _result UnitWeakVerifyResult
	if err = p.c.Call(ctx, "UnitWeakVerify", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitCreateVerify(ctx context.Context, Req *user.UnitCreateVerifyReq) (r *user.UnitCreateVerifyResp, err error) {
	var _args UnitCreateVerifyArgs
	_args.Req = Req
	var _result UnitCreateVerifyResult
	if err = p.c.Call(ctx, "UnitCreateVerify", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitUpdateVerifyPassword(ctx context.Context, Req *user.UnitUpdateVerifyPasswordReq) (r *basic.Response, err error) {
	var _args UnitUpdateVerifyPasswordArgs
	_args.Req = Req
	var _result UnitUpdateVerifyPasswordResult
	if err = p.c.Call(ctx, "UnitUpdateVerifyPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitLinkUser(ctx context.Context, Req *user.UnitLinkUserReq) (r *basic.Response, err error) {
	var _args UnitLinkUserArgs
	_args.Req = Req
	var _result UnitLinkUserResult
	if err = p.c.Call(ctx, "UnitLinkUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitLinkView(ctx context.Context, Req *user.UnitLinkViewReq) (r *basic.Response, err error) {
	var _args UnitLinkViewArgs
	_args.Req = Req
	var _result UnitLinkViewResult
	if err = p.c.Call(ctx, "UnitLinkView", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitPageQueryUser(ctx context.Context, Req *user.UnitPageQueryUserReq) (r *user.UnitPageQueryUserResp, err error) {
	var _args UnitPageQueryUserArgs
	_args.Req = Req
	var _result UnitPageQueryUserResult
	if err = p.c.Call(ctx, "UnitPageQueryUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitPageQueryView(ctx context.Context, Req *user.UnitPageQueryViewReq) (r *user.UnitPageQueryViewResp, err error) {
	var _args UnitPageQueryViewArgs
	_args.Req = Req
	var _result UnitPageQueryViewResult
	if err = p.c.Call(ctx, "UnitPageQueryView", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitGetAppInfo(ctx context.Context, Req *user.UnitGetAppInfoReq) (r *user.UnitGetAppInfoResp, err error) {
	var _args UnitGetAppInfoArgs
	_args.Req = Req
	var _result UnitGetAppInfoResult
	if err = p.c.Call(ctx, "UnitGetAppInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitModelGetInfo(ctx context.Context, Req *user.UnitModelGetInfoReq) (r *user.UnitModelGetInfoResp, err error) {
	var _args UnitModelGetInfoArgs
	_args.Req = Req
	var _result UnitModelGetInfoResult
	if err = p.c.Call(ctx, "UnitModelGetInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UnitModelUpdateInfo(ctx context.Context, Req *user.UnitModelUpdateInfoReq) (r *basic.Response, err error) {
	var _args UnitModelUpdateInfoArgs
	_args.Req = Req
	var _result UnitModelUpdateInfoResult
	if err = p.c.Call(ctx, "UnitModelUpdateInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by Kitex v0.13.1. DO NOT EDIT.

package unitservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	basic "github.com/xh-polaris/psych-idl/kitex_gen/basic"
	user "github.com/xh-polaris/psych-idl/kitex_gen/user"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	UnitSignUp(ctx context.Context, Req *user.UnitSignUpReq, callOptions ...callopt.Option) (r *basic.Response, err error)
	UnitGetInfo(ctx context.Context, Req *user.UnitGetInfoReq, callOptions ...callopt.Option) (r *user.UnitGetInfoResp, err error)
	UnitUpdateInfo(ctx context.Context, Req *user.UnitUpdateInfoReq, callOptions ...callopt.Option) (r *basic.Response, err error)
	UnitUpdatePassword(ctx context.Context, Req *user.UnitUpdatePasswordReq, callOptions ...callopt.Option) (r *basic.Response, err error)
	UnitCreateAndLinkUser(ctx context.Context, Req *user.UnitCreateAndLinkUserReq, callOptions ...callopt.Option) (r *basic.Response, err error)
	UnitCreateAndLinkView(ctx context.Context, Req *user.UnitCreateAndLinkViewReq, callOptions ...callopt.Option) (r *basic.Response, err error)
	UnitStrongVerify(ctx context.Context, Req *user.UnitStrongVerifyReq, callOptions ...callopt.Option) (r *basic.Response, err error)
	UnitWeakVerify(ctx context.Context, Req *user.UnitWeakVerifyReq, callOptions ...callopt.Option) (r *basic.Response, err error)
	UnitCreateVerify(ctx context.Context, Req *user.UnitCreateVerifyReq, callOptions ...callopt.Option) (r *user.UnitCreateVerifyResp, err error)
	UnitUpdateVerifyPassword(ctx context.Context, Req *user.UnitUpdateVerifyPasswordReq, callOptions ...callopt.Option) (r *basic.Response, err error)
	UnitLinkUser(ctx context.Context, Req *user.UnitLinkUserReq, callOptions ...callopt.Option) (r *basic.Response, err error)
	UnitLinkView(ctx context.Context, Req *user.UnitLinkViewReq, callOptions ...callopt.Option) (r *basic.Response, err error)
	UnitPageQueryUser(ctx context.Context, Req *user.UnitPageQueryUserReq, callOptions ...callopt.Option) (r *user.UnitPageQueryUserResp, err error)
	UnitPageQueryView(ctx context.Context, Req *user.UnitPageQueryViewReq, callOptions ...callopt.Option) (r *user.UnitPageQueryViewResp, err error)
	UnitGetAppInfo(ctx context.Context, Req *user.UnitGetAppInfoReq, callOptions ...callopt.Option) (r *user.UnitGetAppInfoResp, err error)
	UnitModelGetInfo(ctx context.Context, Req *user.UnitModelGetInfoReq, callOptions ...callopt.Option) (r *user.UnitModelGetInfoResp, err error)
	UnitModelUpdateInfo(ctx context.Context, Req *user.UnitModelUpdateInfoReq, callOptions ...callopt.Option) (r *basic.Response, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUnitServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUnitServiceClient struct {
	*kClient
}

func (p *kUnitServiceClient) UnitSignUp(ctx context.Context, Req *user.UnitSignUpReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitSignUp(ctx, Req)
}

func (p *kUnitServiceClient) UnitGetInfo(ctx context.Context, Req *user.UnitGetInfoReq, callOptions ...callopt.Option) (r *user.UnitGetInfoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitGetInfo(ctx, Req)
}

func (p *kUnitServiceClient) UnitUpdateInfo(ctx context.Context, Req *user.UnitUpdateInfoReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitUpdateInfo(ctx, Req)
}

func (p *kUnitServiceClient) UnitUpdatePassword(ctx context.Context, Req *user.UnitUpdatePasswordReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitUpdatePassword(ctx, Req)
}

func (p *kUnitServiceClient) UnitCreateAndLinkUser(ctx context.Context, Req *user.UnitCreateAndLinkUserReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitCreateAndLinkUser(ctx, Req)
}

func (p *kUnitServiceClient) UnitCreateAndLinkView(ctx context.Context, Req *user.UnitCreateAndLinkViewReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitCreateAndLinkView(ctx, Req)
}

func (p *kUnitServiceClient) UnitStrongVerify(ctx context.Context, Req *user.UnitStrongVerifyReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitStrongVerify(ctx, Req)
}

func (p *kUnitServiceClient) UnitWeakVerify(ctx context.Context, Req *user.UnitWeakVerifyReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitWeakVerify(ctx, Req)
}

func (p *kUnitServiceClient) UnitCreateVerify(ctx context.Context, Req *user.UnitCreateVerifyReq, callOptions ...callopt.Option) (r *user.UnitCreateVerifyResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitCreateVerify(ctx, Req)
}

func (p *kUnitServiceClient) UnitUpdateVerifyPassword(ctx context.Context, Req *user.UnitUpdateVerifyPasswordReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitUpdateVerifyPassword(ctx, Req)
}

func (p *kUnitServiceClient) UnitLinkUser(ctx context.Context, Req *user.UnitLinkUserReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitLinkUser(ctx, Req)
}

func (p *kUnitServiceClient) UnitLinkView(ctx context.Context, Req *user.UnitLinkViewReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitLinkView(ctx, Req)
}

func (p *kUnitServiceClient) UnitPageQueryUser(ctx context.Context, Req *user.UnitPageQueryUserReq, callOptions ...callopt.Option) (r *user.UnitPageQueryUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitPageQueryUser(ctx, Req)
}

func (p *kUnitServiceClient) UnitPageQueryView(ctx context.Context, Req *user.UnitPageQueryViewReq, callOptions ...callopt.Option) (r *user.UnitPageQueryViewResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitPageQueryView(ctx, Req)
}

func (p *kUnitServiceClient) UnitGetAppInfo(ctx context.Context, Req *user.UnitGetAppInfoReq, callOptions ...callopt.Option) (r *user.UnitGetAppInfoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitGetAppInfo(ctx, Req)
}

func (p *kUnitServiceClient) UnitModelGetInfo(ctx context.Context, Req *user.UnitModelGetInfoReq, callOptions ...callopt.Option) (r *user.UnitModelGetInfoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitModelGetInfo(ctx, Req)
}

func (p *kUnitServiceClient) UnitModelUpdateInfo(ctx context.Context, Req *user.UnitModelUpdateInfoReq, callOptions ...callopt.Option) (r *basic.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnitModelUpdateInfo(ctx, Req)
}

// Code generated by Kitex v0.14.1. DO NOT EDIT.

package user

import (
	"github.com/xh-polaris/psych-idl/kitex_gen/basic"

	"github.com/cloudwego/prutal"
)

type UnitVerify struct {
	UnitId         string            `protobuf:"bytes,1,opt,name=unitId" json:"unitId,omitempty"`
	VerifyType     int32             `protobuf:"varint,2,opt,name=verifyType" json:"verifyType,omitempty"`
	Account        string            `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
	VerifyPassword string            `protobuf:"bytes,4,opt,name=verifyPassword" json:"verifyPassword,omitempty"`
	Form           map[string]string `protobuf:"bytes,5,rep,name=form" json:"form,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *UnitVerify) Reset() { *x = UnitVerify{} }

func (x *UnitVerify) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitVerify) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitVerify) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *UnitVerify) GetVerifyType() int32 {
	if x != nil {
		return x.VerifyType
	}
	return 0
}

func (x *UnitVerify) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UnitVerify) GetVerifyPassword() string {
	if x != nil {
		return x.VerifyPassword
	}
	return ""
}

func (x *UnitVerify) GetForm() map[string]string {
	if x != nil {
		return x.Form
	}
	return nil
}

type Unit struct {
	Id             string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Phone          string            `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
	Password       string            `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Name           string            `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Address        string            `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	Contact        string            `protobuf:"bytes,6,opt,name=contact" json:"contact,omitempty"`
	Level          int32             `protobuf:"varint,7,opt,name=level" json:"level,omitempty"`
	Status         int32             `protobuf:"varint,8,opt,name=status" json:"status,omitempty"`
	VerifyType     int32             `protobuf:"varint,9,opt,name=verifyType" json:"verifyType,omitempty"`
	Account        string            `protobuf:"bytes,10,opt,name=account" json:"account,omitempty"`
	VerifyPassword string            `protobuf:"bytes,11,opt,name=verifyPassword" json:"verifyPassword,omitempty"`
	Form           map[string]string `protobuf:"bytes,12,rep,name=form" json:"form,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreateTime     int64             `protobuf:"varint,13,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime     int64             `protobuf:"varint,14,opt,name=updateTime" json:"updateTime,omitempty"`
	DeleteTime     int64             `protobuf:"varint,15,opt,name=deleteTime" json:"deleteTime,omitempty"`
}

func (x *Unit) Reset() { *x = Unit{} }

func (x *Unit) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Unit) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Unit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Unit) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Unit) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Unit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Unit) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Unit) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *Unit) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Unit) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Unit) GetVerifyType() int32 {
	if x != nil {
		return x.VerifyType
	}
	return 0
}

func (x *Unit) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Unit) GetVerifyPassword() string {
	if x != nil {
		return x.VerifyPassword
	}
	return ""
}

func (x *Unit) GetForm() map[string]string {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *Unit) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Unit) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Unit) GetDeleteTime() int64 {
	if x != nil {
		return x.DeleteTime
	}
	return 0
}

type User struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Phone      string `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
	Password   string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Birth      string `protobuf:"bytes,5,opt,name=birth" json:"birth,omitempty"`
	Gender     int32  `protobuf:"varint,6,opt,name=gender" json:"gender,omitempty"`
	Status     int32  `protobuf:"varint,7,opt,name=status" json:"status,omitempty"`
	CreateTime int64  `protobuf:"varint,8,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime int64  `protobuf:"varint,9,opt,name=updateTime" json:"updateTime,omitempty"`
	DeleteTime int64  `protobuf:"varint,10,opt,name=deleteTime" json:"deleteTime,omitempty"`
}

func (x *User) Reset() { *x = User{} }

func (x *User) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *User) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetBirth() string {
	if x != nil {
		return x.Birth
	}
	return ""
}

func (x *User) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *User) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *User) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *User) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *User) GetDeleteTime() int64 {
	if x != nil {
		return x.DeleteTime
	}
	return 0
}

type View struct {
	Id              string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Phone           string                 `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
	Password        string                 `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Name            string                 `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Address         string                 `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	Contact         string                 `protobuf:"bytes,6,opt,name=contact" json:"contact,omitempty"`
	UnitMemberships []*View_UnitMembership `protobuf:"bytes,7,rep,name=unitMemberships" json:"unitMemberships,omitempty"`
	Status          int32                  `protobuf:"varint,8,opt,name=status" json:"status,omitempty"`
	CreateTime      int64                  `protobuf:"varint,9,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime      int64                  `protobuf:"varint,10,opt,name=updateTime" json:"updateTime,omitempty"`
	DeleteTime      int64                  `protobuf:"varint,11,opt,name=deleteTime" json:"deleteTime,omitempty"`
}

func (x *View) Reset() { *x = View{} }

func (x *View) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *View) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *View) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *View) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *View) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *View) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *View) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *View) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *View) GetUnitMemberships() []*View_UnitMembership {
	if x != nil {
		return x.UnitMemberships
	}
	return nil
}

func (x *View) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *View) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *View) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *View) GetDeleteTime() int64 {
	if x != nil {
		return x.DeleteTime
	}
	return 0
}

type View_UnitMembership struct {
	UnitId string `protobuf:"bytes,1,opt,name=unitId" json:"unitId,omitempty"`
	Level  int32  `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (x *View_UnitMembership) Reset() { *x = View_UnitMembership{} }

func (x *View_UnitMembership) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *View_UnitMembership) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *View_UnitMembership) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *View_UnitMembership) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type UnitModel struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Chat       string `protobuf:"bytes,2,opt,name=chat" json:"chat,omitempty"`
	Asr        string `protobuf:"bytes,3,opt,name=asr" json:"asr,omitempty"`
	Tts        string `protobuf:"bytes,4,opt,name=tts" json:"tts,omitempty"`
	Report     string `protobuf:"bytes,5,opt,name=report" json:"report,omitempty"`
	Option     string `protobuf:"bytes,6,opt,name=option" json:"option,omitempty"`
	Status     int32  `protobuf:"varint,7,opt,name=status" json:"status,omitempty"`
	CreateTime int64  `protobuf:"varint,8,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime int64  `protobuf:"varint,9,opt,name=updateTime" json:"updateTime,omitempty"`
	DeleteTime int64  `protobuf:"varint,10,opt,name=deleteTime" json:"deleteTime,omitempty"`
}

func (x *UnitModel) Reset() { *x = UnitModel{} }

func (x *UnitModel) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitModel) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitModel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UnitModel) GetChat() string {
	if x != nil {
		return x.Chat
	}
	return ""
}

func (x *UnitModel) GetAsr() string {
	if x != nil {
		return x.Asr
	}
	return ""
}

func (x *UnitModel) GetTts() string {
	if x != nil {
		return x.Tts
	}
	return ""
}

func (x *UnitModel) GetReport() string {
	if x != nil {
		return x.Report
	}
	return ""
}

func (x *UnitModel) GetOption() string {
	if x != nil {
		return x.Option
	}
	return ""
}

func (x *UnitModel) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UnitModel) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UnitModel) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *UnitModel) GetDeleteTime() int64 {
	if x != nil {
		return x.DeleteTime
	}
	return 0
}

/* unit */
// unit账号注册
type UnitSignUpReq struct {
	Unit *Unit `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
}

func (x *UnitSignUpReq) Reset() { *x = UnitSignUpReq{} }

func (x *UnitSignUpReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitSignUpReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitSignUpReq) GetUnit() *Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

type UnitSignUpResp struct {
	Unit *Unit `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
}

func (x *UnitSignUpResp) Reset() { *x = UnitSignUpResp{} }

func (x *UnitSignUpResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitSignUpResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitSignUpResp) GetUnit() *Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

// 获取用户信息
type UnitGetInfoReq struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *UnitGetInfoReq) Reset() { *x = UnitGetInfoReq{} }

func (x *UnitGetInfoReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitGetInfoReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitGetInfoReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UnitGetInfoResp struct {
	Unit *Unit `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
}

func (x *UnitGetInfoResp) Reset() { *x = UnitGetInfoResp{} }

func (x *UnitGetInfoResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitGetInfoResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitGetInfoResp) GetUnit() *Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

// 修改账号信息
type UnitUpdateInfoReq struct {
	Unit *Unit `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
}

func (x *UnitUpdateInfoReq) Reset() { *x = UnitUpdateInfoReq{} }

func (x *UnitUpdateInfoReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitUpdateInfoReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitUpdateInfoReq) GetUnit() *Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

// 修改密码
type UnitUpdatePasswordReq struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AuthType    int32  `protobuf:"varint,2,opt,name=authType" json:"authType,omitempty"`
	AuthId      string `protobuf:"bytes,3,opt,name=authId" json:"authId,omitempty"`
	NewPassword string `protobuf:"bytes,4,opt,name=newPassword" json:"newPassword,omitempty"`
}

func (x *UnitUpdatePasswordReq) Reset() { *x = UnitUpdatePasswordReq{} }

func (x *UnitUpdatePasswordReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UnitUpdatePasswordReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitUpdatePasswordReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UnitUpdatePasswordReq) GetAuthType() int32 {
	if x != nil {
		return x.AuthType
	}
	return 0
}

func (x *UnitUpdatePasswordReq) GetAuthId() string {
	if x != nil {
		return x.AuthId
	}
	return ""
}

func (x *UnitUpdatePasswordReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

// unit 登录
type UnitSignInReq struct {
	Phone      string  `protobuf:"bytes,1,opt,name=phone" json:"phone,omitempty"`
	AuthType   int32   `protobuf:"varint,2,opt,name=authType" json:"authType,omitempty"`
	Password   *string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	VerifyCode *string `protobuf:"bytes,4,opt,name=verifyCode" json:"verifyCode,omitempty"`
}

func (x *UnitSignInReq) Reset() { *x = UnitSignInReq{} }

func (x *UnitSignInReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitSignInReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitSignInReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UnitSignInReq) GetAuthType() int32 {
	if x != nil {
		return x.AuthType
	}
	return 0
}

func (x *UnitSignInReq) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *UnitSignInReq) GetVerifyCode() string {
	if x != nil && x.VerifyCode != nil {
		return *x.VerifyCode
	}
	return ""
}

type UnitSignInResp struct {
	Unit *Unit `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
}

func (x *UnitSignInResp) Reset() { *x = UnitSignInResp{} }

func (x *UnitSignInResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitSignInResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitSignInResp) GetUnit() *Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

// 配置登录验证信息-unit_verify
type UnitCreateVerifyReq struct {
	Verify *UnitVerify `protobuf:"bytes,1,opt,name=verify" json:"verify,omitempty"`
}

func (x *UnitCreateVerifyReq) Reset() { *x = UnitCreateVerifyReq{} }

func (x *UnitCreateVerifyReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitCreateVerifyReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitCreateVerifyReq) GetVerify() *UnitVerify {
	if x != nil {
		return x.Verify
	}
	return nil
}

type UnitCreateVerifyResp struct {
	// 如果是弱验证，则返回账号和密码
	Unit *Unit `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
}

func (x *UnitCreateVerifyResp) Reset() { *x = UnitCreateVerifyResp{} }

func (x *UnitCreateVerifyResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitCreateVerifyResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitCreateVerifyResp) GetUnit() *Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

// 修改verify
type UnitUpdateVerifyReq struct {
	Verify *UnitVerify `protobuf:"bytes,1,opt,name=verify" json:"verify,omitempty"`
}

func (x *UnitUpdateVerifyReq) Reset() { *x = UnitUpdateVerifyReq{} }

func (x *UnitUpdateVerifyReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitUpdateVerifyReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitUpdateVerifyReq) GetVerify() *UnitVerify {
	if x != nil {
		return x.Verify
	}
	return nil
}

// 关联user账号
type UnitLinkUserReq struct {
	UnitId string `protobuf:"bytes,1,opt,name=unitId" json:"unitId,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
}

func (x *UnitLinkUserReq) Reset() { *x = UnitLinkUserReq{} }

func (x *UnitLinkUserReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitLinkUserReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitLinkUserReq) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *UnitLinkUserReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 关联view账号
type UnitLinkViewReq struct {
	UnitId string `protobuf:"bytes,1,opt,name=unitId" json:"unitId,omitempty"`
	ViewId string `protobuf:"bytes,2,opt,name=viewId" json:"viewId,omitempty"`
	Level  int32  `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
}

func (x *UnitLinkViewReq) Reset() { *x = UnitLinkViewReq{} }

func (x *UnitLinkViewReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitLinkViewReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitLinkViewReq) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *UnitLinkViewReq) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *UnitLinkViewReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// 获取可用模型
type UnitGetAppInfoReq struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *UnitGetAppInfoReq) Reset() { *x = UnitGetAppInfoReq{} }

func (x *UnitGetAppInfoReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitGetAppInfoReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitGetAppInfoReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UnitGetAppInfoResp struct {
	AppId []string `protobuf:"bytes,1,rep,name=appId" json:"appId,omitempty"`
}

func (x *UnitGetAppInfoResp) Reset() { *x = UnitGetAppInfoResp{} }

func (x *UnitGetAppInfoResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitGetAppInfoResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitGetAppInfoResp) GetAppId() []string {
	if x != nil {
		return x.AppId
	}
	return nil
}

// 获取模型配置信息
type UnitModelGetInfoReq struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *UnitModelGetInfoReq) Reset() { *x = UnitModelGetInfoReq{} }

func (x *UnitModelGetInfoReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitModelGetInfoReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitModelGetInfoReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UnitModelGetInfoResp struct {
	UnitModel *UnitModel `protobuf:"bytes,1,opt,name=unitModel" json:"unitModel,omitempty"`
}

func (x *UnitModelGetInfoResp) Reset() { *x = UnitModelGetInfoResp{} }

func (x *UnitModelGetInfoResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitModelGetInfoResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitModelGetInfoResp) GetUnitModel() *UnitModel {
	if x != nil {
		return x.UnitModel
	}
	return nil
}

// 修改模型配置
type UnitModelUpdateInfoReq struct {
	UnitModel *UnitModel `protobuf:"bytes,1,opt,name=unitModel" json:"unitModel,omitempty"`
}

func (x *UnitModelUpdateInfoReq) Reset() { *x = UnitModelUpdateInfoReq{} }

func (x *UnitModelUpdateInfoReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UnitModelUpdateInfoReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitModelUpdateInfoReq) GetUnitModel() *UnitModel {
	if x != nil {
		return x.UnitModel
	}
	return nil
}

// 分页查询所属用户
type UnitPageQueryUserReq struct {
	Id                string                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PaginationOptions *basic.PaginationOptions `protobuf:"bytes,2,opt,name=paginationOptions" json:"paginationOptions,omitempty"`
}

func (x *UnitPageQueryUserReq) Reset() { *x = UnitPageQueryUserReq{} }

func (x *UnitPageQueryUserReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitPageQueryUserReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitPageQueryUserReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UnitPageQueryUserReq) GetPaginationOptions() *basic.PaginationOptions {
	if x != nil {
		return x.PaginationOptions
	}
	return nil
}

type UnitPageQueryUserResp struct {
	User []*User `protobuf:"bytes,1,rep,name=user" json:"user,omitempty"`
}

func (x *UnitPageQueryUserResp) Reset() { *x = UnitPageQueryUserResp{} }

func (x *UnitPageQueryUserResp) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UnitPageQueryUserResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitPageQueryUserResp) GetUser() []*User {
	if x != nil {
		return x.User
	}
	return nil
}

type UnitPageQueryViewReq struct {
	Id                string                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PaginationOptions *basic.PaginationOptions `protobuf:"bytes,2,opt,name=paginationOptions" json:"paginationOptions,omitempty"`
}

func (x *UnitPageQueryViewReq) Reset() { *x = UnitPageQueryViewReq{} }

func (x *UnitPageQueryViewReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitPageQueryViewReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitPageQueryViewReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UnitPageQueryViewReq) GetPaginationOptions() *basic.PaginationOptions {
	if x != nil {
		return x.PaginationOptions
	}
	return nil
}

type UnitPageQueryViewResp struct {
	View []*View `protobuf:"bytes,1,rep,name=view" json:"view,omitempty"`
}

func (x *UnitPageQueryViewResp) Reset() { *x = UnitPageQueryViewResp{} }

func (x *UnitPageQueryViewResp) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UnitPageQueryViewResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitPageQueryViewResp) GetView() []*View {
	if x != nil {
		return x.View
	}
	return nil
}

// 批量创建并关联用户
type UnitCreateAndLinkUserReq struct {
	UnitId   string                        `protobuf:"bytes,1,opt,name=unitId" json:"unitId,omitempty"`
	AuthType int32                         `protobuf:"varint,2,opt,name=authType" json:"authType,omitempty"`
	Users    []*UnitCreateAndLinkUserReq_U `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
}

func (x *UnitCreateAndLinkUserReq) Reset() { *x = UnitCreateAndLinkUserReq{} }

func (x *UnitCreateAndLinkUserReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UnitCreateAndLinkUserReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitCreateAndLinkUserReq) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *UnitCreateAndLinkUserReq) GetAuthType() int32 {
	if x != nil {
		return x.AuthType
	}
	return 0
}

func (x *UnitCreateAndLinkUserReq) GetUsers() []*UnitCreateAndLinkUserReq_U {
	if x != nil {
		return x.Users
	}
	return nil
}

type UnitCreateAndLinkUserReq_U struct {
	AuthId     string            `protobuf:"bytes,1,opt,name=authId" json:"authId,omitempty"`
	VerifyCode string            `protobuf:"bytes,2,opt,name=verifyCode" json:"verifyCode,omitempty"`
	Name       string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Gender     int32             `protobuf:"varint,4,opt,name=gender" json:"gender,omitempty"`
	Password   string            `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	Form       map[string]string `protobuf:"bytes,6,rep,name=form" json:"form,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *UnitCreateAndLinkUserReq_U) Reset() { *x = UnitCreateAndLinkUserReq_U{} }

func (x *UnitCreateAndLinkUserReq_U) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UnitCreateAndLinkUserReq_U) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitCreateAndLinkUserReq_U) GetAuthId() string {
	if x != nil {
		return x.AuthId
	}
	return ""
}

func (x *UnitCreateAndLinkUserReq_U) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *UnitCreateAndLinkUserReq_U) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UnitCreateAndLinkUserReq_U) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *UnitCreateAndLinkUserReq_U) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UnitCreateAndLinkUserReq_U) GetForm() map[string]string {
	if x != nil {
		return x.Form
	}
	return nil
}

type UnitCreateAndLinkViewReq struct {
	UnitId    string   `protobuf:"bytes,1,opt,name=unitId" json:"unitId,omitempty"`
	ViewPhone []string `protobuf:"bytes,2,rep,name=viewPhone" json:"viewPhone,omitempty"`
}

func (x *UnitCreateAndLinkViewReq) Reset() { *x = UnitCreateAndLinkViewReq{} }

func (x *UnitCreateAndLinkViewReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UnitCreateAndLinkViewReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitCreateAndLinkViewReq) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *UnitCreateAndLinkViewReq) GetViewPhone() []string {
	if x != nil {
		return x.ViewPhone
	}
	return nil
}

/* view */
// view账号注册
type ViewSignUpReq struct {
	View *View `protobuf:"bytes,1,opt,name=view" json:"view,omitempty"`
}

func (x *ViewSignUpReq) Reset() { *x = ViewSignUpReq{} }

func (x *ViewSignUpReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewSignUpReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewSignUpReq) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

type ViewSignUpResp struct {
	View *View `protobuf:"bytes,1,opt,name=view" json:"view,omitempty"`
}

func (x *ViewSignUpResp) Reset() { *x = ViewSignUpResp{} }

func (x *ViewSignUpResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewSignUpResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewSignUpResp) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

// 登录
type ViewSignInReq struct {
	Phone      string  `protobuf:"bytes,1,opt,name=phone" json:"phone,omitempty"`
	Password   *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	VerifyCode *string `protobuf:"bytes,3,opt,name=verifyCode" json:"verifyCode,omitempty"`
}

func (x *ViewSignInReq) Reset() { *x = ViewSignInReq{} }

func (x *ViewSignInReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewSignInReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewSignInReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ViewSignInReq) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *ViewSignInReq) GetVerifyCode() string {
	if x != nil && x.VerifyCode != nil {
		return *x.VerifyCode
	}
	return ""
}

type ViewSignInResp struct {
	View *View `protobuf:"bytes,1,opt,name=view" json:"view,omitempty"`
}

func (x *ViewSignInResp) Reset() { *x = ViewSignInResp{} }

func (x *ViewSignInResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewSignInResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewSignInResp) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

// 获取信息
type ViewGetInfoReq struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *ViewGetInfoReq) Reset() { *x = ViewGetInfoReq{} }

func (x *ViewGetInfoReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewGetInfoReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewGetInfoReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ViewGetInfoResp struct {
	View *View `protobuf:"bytes,1,opt,name=view" json:"view,omitempty"`
}

func (x *ViewGetInfoResp) Reset() { *x = ViewGetInfoResp{} }

func (x *ViewGetInfoResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewGetInfoResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewGetInfoResp) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

// 更新信息
type ViewUpdateInfoReq struct {
	View *View `protobuf:"bytes,1,opt,name=view" json:"view,omitempty"`
}

func (x *ViewUpdateInfoReq) Reset() { *x = ViewUpdateInfoReq{} }

func (x *ViewUpdateInfoReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewUpdateInfoReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewUpdateInfoReq) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

// 更新密码
type ViewUpdatePasswordReq struct {
	Id          string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OldPassword *string `protobuf:"bytes,2,opt,name=oldPassword" json:"oldPassword,omitempty"`
	VerifyCode  *string `protobuf:"bytes,3,opt,name=verifyCode" json:"verifyCode,omitempty"`
	NewPassword string  `protobuf:"bytes,4,opt,name=newPassword" json:"newPassword,omitempty"`
}

func (x *ViewUpdatePasswordReq) Reset() { *x = ViewUpdatePasswordReq{} }

func (x *ViewUpdatePasswordReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *ViewUpdatePasswordReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewUpdatePasswordReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ViewUpdatePasswordReq) GetOldPassword() string {
	if x != nil && x.OldPassword != nil {
		return *x.OldPassword
	}
	return ""
}

func (x *ViewUpdatePasswordReq) GetVerifyCode() string {
	if x != nil && x.VerifyCode != nil {
		return *x.VerifyCode
	}
	return ""
}

func (x *ViewUpdatePasswordReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

// 查询关联unit
type ViewBelongUnitReq struct {
	Id                string                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PaginationOptions *basic.PaginationOptions `protobuf:"bytes,2,opt,name=paginationOptions" json:"paginationOptions,omitempty"`
}

func (x *ViewBelongUnitReq) Reset() { *x = ViewBelongUnitReq{} }

func (x *ViewBelongUnitReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewBelongUnitReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewBelongUnitReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ViewBelongUnitReq) GetPaginationOptions() *basic.PaginationOptions {
	if x != nil {
		return x.PaginationOptions
	}
	return nil
}

type ViewBelongUnitResp struct {
	UnitMembers []*ViewBelongUnitResp_UnitMember `protobuf:"bytes,1,rep,name=unitMembers" json:"unitMembers,omitempty"`
}

func (x *ViewBelongUnitResp) Reset() { *x = ViewBelongUnitResp{} }

func (x *ViewBelongUnitResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewBelongUnitResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewBelongUnitResp) GetUnitMembers() []*ViewBelongUnitResp_UnitMember {
	if x != nil {
		return x.UnitMembers
	}
	return nil
}

type ViewBelongUnitResp_UnitMember struct {
	Unit  *Unit `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
	Level int32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (x *ViewBelongUnitResp_UnitMember) Reset() { *x = ViewBelongUnitResp_UnitMember{} }

func (x *ViewBelongUnitResp_UnitMember) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *ViewBelongUnitResp_UnitMember) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewBelongUnitResp_UnitMember) GetUnit() *Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *ViewBelongUnitResp_UnitMember) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

/* user */
// user账号注册
type UserSignUpReq struct {
	User       *User   `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	VerifyCode string  `protobuf:"bytes,2,opt,name=verifyCode" json:"verifyCode,omitempty"`
	UnitId     *string `protobuf:"bytes,3,opt,name=unitId" json:"unitId,omitempty"`
	StudentId  *string `protobuf:"bytes,4,opt,name=studentId" json:"studentId,omitempty"`
}

func (x *UserSignUpReq) Reset() { *x = UserSignUpReq{} }

func (x *UserSignUpReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserSignUpReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserSignUpReq) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserSignUpReq) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *UserSignUpReq) GetUnitId() string {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return ""
}

func (x *UserSignUpReq) GetStudentId() string {
	if x != nil && x.StudentId != nil {
		return *x.StudentId
	}
	return ""
}

type UserSignUpResp struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (x *UserSignUpResp) Reset() { *x = UserSignUpResp{} }

func (x *UserSignUpResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserSignUpResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserSignUpResp) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// user登录，兼具弱验证校验方式
type UserSignInReq struct {
	UnitId     string  `protobuf:"bytes,1,opt,name=unitId" json:"unitId,omitempty"`
	AuthType   int32   `protobuf:"varint,2,opt,name=authType" json:"authType,omitempty"`
	AuthId     string  `protobuf:"bytes,3,opt,name=authId" json:"authId,omitempty"`
	VerifyCode *string `protobuf:"bytes,4,opt,name=verifyCode" json:"verifyCode,omitempty"`
	Password   *string `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
}

func (x *UserSignInReq) Reset() { *x = UserSignInReq{} }

func (x *UserSignInReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserSignInReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserSignInReq) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *UserSignInReq) GetAuthType() int32 {
	if x != nil {
		return x.AuthType
	}
	return 0
}

func (x *UserSignInReq) GetAuthId() string {
	if x != nil {
		return x.AuthId
	}
	return ""
}

func (x *UserSignInReq) GetVerifyCode() string {
	if x != nil && x.VerifyCode != nil {
		return *x.VerifyCode
	}
	return ""
}

func (x *UserSignInReq) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type UserSignInResp struct {
	UnitId    string  `protobuf:"bytes,1,opt,name=unitId" json:"unitId,omitempty"`
	UserId    string  `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
	StudentId *string `protobuf:"bytes,3,opt,name=studentId" json:"studentId,omitempty"`
}

func (x *UserSignInResp) Reset() { *x = UserSignInResp{} }

func (x *UserSignInResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserSignInResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserSignInResp) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *UserSignInResp) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserSignInResp) GetStudentId() string {
	if x != nil && x.StudentId != nil {
		return *x.StudentId
	}
	return ""
}

// 获取信息
type UserGetInfoReq struct {
	UserId string  `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	UnitId *string `protobuf:"bytes,2,opt,name=unitId" json:"unitId,omitempty"`
}

func (x *UserGetInfoReq) Reset() { *x = UserGetInfoReq{} }

func (x *UserGetInfoReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserGetInfoReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserGetInfoReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserGetInfoReq) GetUnitId() string {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return ""
}

type UserGetInfoResp struct {
	User      *User             `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	UnitId    *string           `protobuf:"bytes,2,opt,name=unitId" json:"unitId,omitempty"`
	StudentId *string           `protobuf:"bytes,3,opt,name=studentId" json:"studentId,omitempty"`
	Form      map[string]string `protobuf:"bytes,4,rep,name=form" json:"form,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *UserGetInfoResp) Reset() { *x = UserGetInfoResp{} }

func (x *UserGetInfoResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserGetInfoResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserGetInfoResp) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserGetInfoResp) GetUnitId() string {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return ""
}

func (x *UserGetInfoResp) GetStudentId() string {
	if x != nil && x.StudentId != nil {
		return *x.StudentId
	}
	return ""
}

func (x *UserGetInfoResp) GetForm() map[string]string {
	if x != nil {
		return x.Form
	}
	return nil
}

// 更新信息
type UserUpdateInfoReq struct {
	// 修改私有信息
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`

	// 修改关联信息
	UnitId *string           `protobuf:"bytes,2,opt,name=unitId" json:"unitId,omitempty"`
	Form   map[string]string `protobuf:"bytes,3,rep,name=form" json:"form,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *UserUpdateInfoReq) Reset() { *x = UserUpdateInfoReq{} }

func (x *UserUpdateInfoReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserUpdateInfoReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserUpdateInfoReq) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserUpdateInfoReq) GetUnitId() string {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return ""
}

func (x *UserUpdateInfoReq) GetForm() map[string]string {
	if x != nil {
		return x.Form
	}
	return nil
}

// 更新密码
type UserUpdatePasswordReq struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AuthType    int32  `protobuf:"varint,2,opt,name=authType" json:"authType,omitempty"`
	AuthValue   string `protobuf:"bytes,3,opt,name=authValue" json:"authValue,omitempty"`
	NewPassword string `protobuf:"bytes,4,opt,name=newPassword" json:"newPassword,omitempty"`
}

func (x *UserUpdatePasswordReq) Reset() { *x = UserUpdatePasswordReq{} }

func (x *UserUpdatePasswordReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UserUpdatePasswordReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserUpdatePasswordReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserUpdatePasswordReq) GetAuthType() int32 {
	if x != nil {
		return x.AuthType
	}
	return 0
}

func (x *UserUpdatePasswordReq) GetAuthValue() string {
	if x != nil {
		return x.AuthValue
	}
	return ""
}

func (x *UserUpdatePasswordReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

// 分页查询关联unit
type UserBelongUnitReq struct {
	Id                string                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PaginationOptions *basic.PaginationOptions `protobuf:"bytes,2,opt,name=paginationOptions" json:"paginationOptions,omitempty"`
}

func (x *UserBelongUnitReq) Reset() { *x = UserBelongUnitReq{} }

func (x *UserBelongUnitReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserBelongUnitReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserBelongUnitReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserBelongUnitReq) GetPaginationOptions() *basic.PaginationOptions {
	if x != nil {
		return x.PaginationOptions
	}
	return nil
}

type UserBelongUnitResp struct {
	Units []*Unit `protobuf:"bytes,1,rep,name=units" json:"units,omitempty"`
}

func (x *UserBelongUnitResp) Reset() { *x = UserBelongUnitResp{} }

func (x *UserBelongUnitResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserBelongUnitResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserBelongUnitResp) GetUnits() []*Unit {
	if x != nil {
		return x.Units
	}
	return nil
}

// Code generated by Kitex v0.13.1. DO NOT EDIT.

package user

import (
	"context"
	"github.com/xh-polaris/psych-idl/kitex_gen/basic"

	"github.com/cloudwego/prutal"
)

/* view账号注册 */
type ViewSignUpReq struct {
	View *View `protobuf:"bytes,1,opt,name=view" json:"view,omitempty"`
}

func (x *ViewSignUpReq) Reset() { *x = ViewSignUpReq{} }

func (x *ViewSignUpReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewSignUpReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewSignUpReq) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

/* 登录 */
type ViewSignInReq struct {
	Phone      string  `protobuf:"bytes,1,opt,name=phone" json:"phone,omitempty"`
	Password   *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	VerifyCode *string `protobuf:"bytes,3,opt,name=verifyCode" json:"verifyCode,omitempty"`
}

func (x *ViewSignInReq) Reset() { *x = ViewSignInReq{} }

func (x *ViewSignInReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewSignInReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewSignInReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ViewSignInReq) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *ViewSignInReq) GetVerifyCode() string {
	if x != nil && x.VerifyCode != nil {
		return *x.VerifyCode
	}
	return ""
}

/* 获取信息 */
type ViewGetInfoReq struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *ViewGetInfoReq) Reset() { *x = ViewGetInfoReq{} }

func (x *ViewGetInfoReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewGetInfoReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewGetInfoReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ViewGetInfoResp struct {
	View *View `protobuf:"bytes,1,opt,name=view" json:"view,omitempty"`
}

func (x *ViewGetInfoResp) Reset() { *x = ViewGetInfoResp{} }

func (x *ViewGetInfoResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewGetInfoResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewGetInfoResp) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

/* 更新信息 */
type ViewUpdateInfoReq struct {
	View *View `protobuf:"bytes,1,opt,name=view" json:"view,omitempty"`
}

func (x *ViewUpdateInfoReq) Reset() { *x = ViewUpdateInfoReq{} }

func (x *ViewUpdateInfoReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewUpdateInfoReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewUpdateInfoReq) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

/* 更新密码 */
type ViewUpdatePasswordReq struct {
	Id          string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OldPassword *string `protobuf:"bytes,2,opt,name=oldPassword" json:"oldPassword,omitempty"`
	NewPassword string  `protobuf:"bytes,3,opt,name=newPassword" json:"newPassword,omitempty"`
	VerifyCode  *string `protobuf:"bytes,4,opt,name=verifyCode" json:"verifyCode,omitempty"`
}

func (x *ViewUpdatePasswordReq) Reset() { *x = ViewUpdatePasswordReq{} }

func (x *ViewUpdatePasswordReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *ViewUpdatePasswordReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewUpdatePasswordReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ViewUpdatePasswordReq) GetOldPassword() string {
	if x != nil && x.OldPassword != nil {
		return *x.OldPassword
	}
	return ""
}

func (x *ViewUpdatePasswordReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *ViewUpdatePasswordReq) GetVerifyCode() string {
	if x != nil && x.VerifyCode != nil {
		return *x.VerifyCode
	}
	return ""
}

type UnitMember struct {
	Unit  *Unit `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
	Level int32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (x *UnitMember) Reset() { *x = UnitMember{} }

func (x *UnitMember) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UnitMember) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UnitMember) GetUnit() *Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *UnitMember) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

/* 查询关联unit */
type ViewBelongUnitReq struct {
	Id                string                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PaginationOptions *basic.PaginationOptions `protobuf:"bytes,2,opt,name=paginationOptions" json:"paginationOptions,omitempty"`
}

func (x *ViewBelongUnitReq) Reset() { *x = ViewBelongUnitReq{} }

func (x *ViewBelongUnitReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewBelongUnitReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewBelongUnitReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ViewBelongUnitReq) GetPaginationOptions() *basic.PaginationOptions {
	if x != nil {
		return x.PaginationOptions
	}
	return nil
}

type ViewBelongUnitResp struct {
	UnitMembers []*UnitMember `protobuf:"bytes,1,rep,name=unitMembers" json:"unitMembers,omitempty"`
}

func (x *ViewBelongUnitResp) Reset() { *x = ViewBelongUnitResp{} }

func (x *ViewBelongUnitResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ViewBelongUnitResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ViewBelongUnitResp) GetUnitMembers() []*UnitMember {
	if x != nil {
		return x.UnitMembers
	}
	return nil
}

type ViewService interface {
	ViewSignUp(ctx context.Context, req *ViewSignUpReq) (res *basic.Response, err error)
	ViewGetInfo(ctx context.Context, req *ViewGetInfoReq) (res *ViewGetInfoResp, err error)
	ViewUpdateInfo(ctx context.Context, req *ViewUpdateInfoReq) (res *basic.Response, err error)
	ViewUpdatePassword(ctx context.Context, req *ViewUpdatePasswordReq) (res *basic.Response, err error)
	ViewBelongUnit(ctx context.Context, req *ViewBelongUnitReq) (res *ViewBelongUnitResp, err error)
	ViewSignIn(ctx context.Context, req *ViewSignInReq) (res *basic.Response, err error)
}

// Code generated by Kitex v0.13.1. DO NOT EDIT.

package userservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "github.com/cloudwego/prutal"
	basic "github.com/xh-polaris/psych-idl/kitex_gen/basic"
	user "github.com/xh-polaris/psych-idl/kitex_gen/user"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"UserSignUp": kitex.NewMethodInfo(
		userSignUpHandler,
		newUserSignUpArgs,
		newUserSignUpResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserGetInfo": kitex.NewMethodInfo(
		userGetInfoHandler,
		newUserGetInfoArgs,
		newUserGetInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserUpdateInfo": kitex.NewMethodInfo(
		userUpdateInfoHandler,
		newUserUpdateInfoArgs,
		newUserUpdateInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserUpdatePassword": kitex.NewMethodInfo(
		userUpdatePasswordHandler,
		newUserUpdatePasswordArgs,
		newUserUpdatePasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserBelongUnit": kitex.NewMethodInfo(
		userBelongUnitHandler,
		newUserBelongUnitArgs,
		newUserBelongUnitResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserSignIn": kitex.NewMethodInfo(
		userSignInHandler,
		newUserSignInArgs,
		newUserSignInResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	userServiceServiceInfo                = NewServiceInfo()
	userServiceServiceInfoForClient       = NewServiceInfoForClient()
	userServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func userSignUpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserSignUpReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserSignUp(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserSignUpArgs:
		success, err := handler.(user.UserService).UserSignUp(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserSignUpResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserSignUpArgs() interface{} {
	return &UserSignUpArgs{}
}

func newUserSignUpResult() interface{} {
	return &UserSignUpResult{}
}

type UserSignUpArgs struct {
	Req *user.UserSignUpReq
}

func (p *UserSignUpArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserSignUpArgs) Unmarshal(in []byte) error {
	msg := new(user.UserSignUpReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserSignUpArgs_Req_DEFAULT *user.UserSignUpReq

func (p *UserSignUpArgs) GetReq() *user.UserSignUpReq {
	if !p.IsSetReq() {
		return UserSignUpArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserSignUpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserSignUpArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserSignUpResult struct {
	Success *basic.Response
}

var UserSignUpResult_Success_DEFAULT *basic.Response

func (p *UserSignUpResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserSignUpResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserSignUpResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UserSignUpResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserSignUpResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UserSignUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserSignUpResult) GetResult() interface{} {
	return p.Success
}

func userGetInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserGetInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserGetInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserGetInfoArgs:
		success, err := handler.(user.UserService).UserGetInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserGetInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserGetInfoArgs() interface{} {
	return &UserGetInfoArgs{}
}

func newUserGetInfoResult() interface{} {
	return &UserGetInfoResult{}
}

type UserGetInfoArgs struct {
	Req *user.UserGetInfoReq
}

func (p *UserGetInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserGetInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.UserGetInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserGetInfoArgs_Req_DEFAULT *user.UserGetInfoReq

func (p *UserGetInfoArgs) GetReq() *user.UserGetInfoReq {
	if !p.IsSetReq() {
		return UserGetInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserGetInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserGetInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserGetInfoResult struct {
	Success *user.UserGetInfoResp
}

var UserGetInfoResult_Success_DEFAULT *user.UserGetInfoResp

func (p *UserGetInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserGetInfoResult) Unmarshal(in []byte) error {
	msg := new(user.UserGetInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserGetInfoResult) GetSuccess() *user.UserGetInfoResp {
	if !p.IsSetSuccess() {
		return UserGetInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserGetInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserGetInfoResp)
}

func (p *UserGetInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserGetInfoResult) GetResult() interface{} {
	return p.Success
}

func userUpdateInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserUpdateInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserUpdateInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserUpdateInfoArgs:
		success, err := handler.(user.UserService).UserUpdateInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserUpdateInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserUpdateInfoArgs() interface{} {
	return &UserUpdateInfoArgs{}
}

func newUserUpdateInfoResult() interface{} {
	return &UserUpdateInfoResult{}
}

type UserUpdateInfoArgs struct {
	Req *user.UserUpdateInfoReq
}

func (p *UserUpdateInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserUpdateInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.UserUpdateInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserUpdateInfoArgs_Req_DEFAULT *user.UserUpdateInfoReq

func (p *UserUpdateInfoArgs) GetReq() *user.UserUpdateInfoReq {
	if !p.IsSetReq() {
		return UserUpdateInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserUpdateInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserUpdateInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserUpdateInfoResult struct {
	Success *basic.Response
}

var UserUpdateInfoResult_Success_DEFAULT *basic.Response

func (p *UserUpdateInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserUpdateInfoResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserUpdateInfoResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UserUpdateInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserUpdateInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UserUpdateInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserUpdateInfoResult) GetResult() interface{} {
	return p.Success
}

func userUpdatePasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserUpdatePasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserUpdatePassword(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserUpdatePasswordArgs:
		success, err := handler.(user.UserService).UserUpdatePassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserUpdatePasswordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserUpdatePasswordArgs() interface{} {
	return &UserUpdatePasswordArgs{}
}

func newUserUpdatePasswordResult() interface{} {
	return &UserUpdatePasswordResult{}
}

type UserUpdatePasswordArgs struct {
	Req *user.UserUpdatePasswordReq
}

func (p *UserUpdatePasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserUpdatePasswordArgs) Unmarshal(in []byte) error {
	msg := new(user.UserUpdatePasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserUpdatePasswordArgs_Req_DEFAULT *user.UserUpdatePasswordReq

func (p *UserUpdatePasswordArgs) GetReq() *user.UserUpdatePasswordReq {
	if !p.IsSetReq() {
		return UserUpdatePasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserUpdatePasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserUpdatePasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserUpdatePasswordResult struct {
	Success *basic.Response
}

var UserUpdatePasswordResult_Success_DEFAULT *basic.Response

func (p *UserUpdatePasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserUpdatePasswordResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserUpdatePasswordResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UserUpdatePasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserUpdatePasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UserUpdatePasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserUpdatePasswordResult) GetResult() interface{} {
	return p.Success
}

func userBelongUnitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserBelongUnitReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserBelongUnit(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserBelongUnitArgs:
		success, err := handler.(user.UserService).UserBelongUnit(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserBelongUnitResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserBelongUnitArgs() interface{} {
	return &UserBelongUnitArgs{}
}

func newUserBelongUnitResult() interface{} {
	return &UserBelongUnitResult{}
}

type UserBelongUnitArgs struct {
	Req *user.UserBelongUnitReq
}

func (p *UserBelongUnitArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserBelongUnitArgs) Unmarshal(in []byte) error {
	msg := new(user.UserBelongUnitReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserBelongUnitArgs_Req_DEFAULT *user.UserBelongUnitReq

func (p *UserBelongUnitArgs) GetReq() *user.UserBelongUnitReq {
	if !p.IsSetReq() {
		return UserBelongUnitArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserBelongUnitArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserBelongUnitArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserBelongUnitResult struct {
	Success *user.UserBelongUnitResp
}

var UserBelongUnitResult_Success_DEFAULT *user.UserBelongUnitResp

func (p *UserBelongUnitResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserBelongUnitResult) Unmarshal(in []byte) error {
	msg := new(user.UserBelongUnitResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserBelongUnitResult) GetSuccess() *user.UserBelongUnitResp {
	if !p.IsSetSuccess() {
		return UserBelongUnitResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserBelongUnitResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserBelongUnitResp)
}

func (p *UserBelongUnitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserBelongUnitResult) GetResult() interface{} {
	return p.Success
}

func userSignInHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserSignInReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserSignIn(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserSignInArgs:
		success, err := handler.(user.UserService).UserSignIn(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserSignInResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserSignInArgs() interface{} {
	return &UserSignInArgs{}
}

func newUserSignInResult() interface{} {
	return &UserSignInResult{}
}

type UserSignInArgs struct {
	Req *user.UserSignInReq
}

func (p *UserSignInArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserSignInArgs) Unmarshal(in []byte) error {
	msg := new(user.UserSignInReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserSignInArgs_Req_DEFAULT *user.UserSignInReq

func (p *UserSignInArgs) GetReq() *user.UserSignInReq {
	if !p.IsSetReq() {
		return UserSignInArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserSignInArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserSignInArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserSignInResult struct {
	Success *basic.Response
}

var UserSignInResult_Success_DEFAULT *basic.Response

func (p *UserSignInResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserSignInResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserSignInResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return UserSignInResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserSignInResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *UserSignInResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserSignInResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserSignUp(ctx context.Context, Req *user.UserSignUpReq) (r *basic.Response, err error) {
	var _args UserSignUpArgs
	_args.Req = Req
	var _result UserSignUpResult
	if err = p.c.Call(ctx, "UserSignUp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserGetInfo(ctx context.Context, Req *user.UserGetInfoReq) (r *user.UserGetInfoResp, err error) {
	var _args UserGetInfoArgs
	_args.Req = Req
	var _result UserGetInfoResult
	if err = p.c.Call(ctx, "UserGetInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserUpdateInfo(ctx context.Context, Req *user.UserUpdateInfoReq) (r *basic.Response, err error) {
	var _args UserUpdateInfoArgs
	_args.Req = Req
	var _result UserUpdateInfoResult
	if err = p.c.Call(ctx, "UserUpdateInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserUpdatePassword(ctx context.Context, Req *user.UserUpdatePasswordReq) (r *basic.Response, err error) {
	var _args UserUpdatePasswordArgs
	_args.Req = Req
	var _result UserUpdatePasswordResult
	if err = p.c.Call(ctx, "UserUpdatePassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserBelongUnit(ctx context.Context, Req *user.UserBelongUnitReq) (r *user.UserBelongUnitResp, err error) {
	var _args UserBelongUnitArgs
	_args.Req = Req
	var _result UserBelongUnitResult
	if err = p.c.Call(ctx, "UserBelongUnit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserSignIn(ctx context.Context, Req *user.UserSignInReq) (r *basic.Response, err error) {
	var _args UserSignInArgs
	_args.Req = Req
	var _result UserSignInResult
	if err = p.c.Call(ctx, "UserSignIn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
